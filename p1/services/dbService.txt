
const DB_NAME = 'BookLayoutDB';
const DB_VERSION = 1;
const QUEUE_STORE_NAME = 'queueStore';
const ANALYSIS_STORE_NAME = 'analysisStore';
const QUEUE_KEY = 'current_queue';
const ANALYSIS_KEY = 'last_analysis';

let db: IDBDatabase;

function openDB(): Promise<IDBDatabase> {
  return new Promise((resolve, reject) => {
    if (db) {
      return resolve(db);
    }

    const request = indexedDB.open(DB_NAME, DB_VERSION);

    request.onerror = (event) => {
      console.error("IndexedDB error:", (event.target as IDBOpenDBRequest).error);
      reject("IndexedDB error");
    };

    request.onsuccess = (event) => {
      db = (event.target as IDBOpenDBRequest).result;
      resolve(db);
    };

    request.onupgradeneeded = (event) => {
      const dbInstance = (event.target as IDBOpenDBRequest).result;
      if (!dbInstance.objectStoreNames.contains(QUEUE_STORE_NAME)) {
        dbInstance.createObjectStore(QUEUE_STORE_NAME);
      }
      if (!dbInstance.objectStoreNames.contains(ANALYSIS_STORE_NAME)) {
        dbInstance.createObjectStore(ANALYSIS_STORE_NAME);
      }
    };
  });
}

export async function saveDataToDB(storeName: string, key: string, data: any): Promise<void> {
  const db = await openDB();
  return new Promise((resolve, reject) => {
    const transaction = db.transaction(storeName, 'readwrite');
    const store = transaction.objectStore(storeName);
    const request = store.put(data, key);

    request.onsuccess = () => resolve();
    request.onerror = () => {
        console.error('Error saving data to IDB:', request.error);
        reject(request.error)
    };
  });
}

export async function loadDataFromDB<T>(storeName: string, key: string): Promise<T | null> {
  const db = await openDB();
  return new Promise((resolve, reject) => {
    const transaction = db.transaction(storeName, 'readonly');
    const store = transaction.objectStore(storeName);
    const request = store.get(key);

    request.onsuccess = () => resolve(request.result || null);
    request.onerror = () => {
        console.error('Error loading data from IDB:', request.error);
        reject(request.error);
    };
  });
}

export async function clearDB(): Promise<void> {
    const db = await openDB();
    return new Promise((resolve, reject) => {
        const transaction = db.transaction([QUEUE_STORE_NAME, ANALYSIS_STORE_NAME], 'readwrite');
        const queueStore = transaction.objectStore(QUEUE_STORE_NAME);
        const analysisStore = transaction.objectStore(ANALYSIS_STORE_NAME);

        const queueClearRequest = queueStore.clear();
        const analysisClearRequest = analysisStore.clear();
        
        let successCount = 0;
        const checkCompletion = () => {
            successCount++;
            if (successCount === 2) {
                resolve();
            }
        };

        queueClearRequest.onsuccess = checkCompletion;
        analysisClearRequest.onsuccess = checkCompletion;

        transaction.onerror = () => {
            console.error('Error clearing stores:', transaction.error);
            reject(transaction.error);
        }
    });
}

// Specific functions for this app
export const saveQueueToDB = (queue: any[]) => saveDataToDB(QUEUE_STORE_NAME, QUEUE_KEY, queue);
export const loadQueueFromDB = () => loadDataFromDB<any[]>(QUEUE_STORE_NAME, QUEUE_KEY);
export const saveAnalysisToDB = (analysis: any) => saveDataToDB(ANALYSIS_STORE_NAME, ANALYSIS_KEY, analysis);
export const loadAnalysisFromDB = () => loadDataFromDB<any>(ANALYSIS_STORE_NAME, ANALYSIS_KEY);
