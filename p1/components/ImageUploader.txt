import React, { useState, useCallback, useRef, memo } from 'react';
import { UploadIcon, PlusIcon } from './Icons';
import { useLocale } from './ImageToHtmlConverter';

interface ImageUploaderProps {
  onImageUploaded: (files: File[]) => void;
  isDisabled: boolean;
  key?: number; // Used to reset the component
  compact?: boolean;
}

const ImageUploader = ({ onImageUploaded, isDisabled, key, compact = false }: ImageUploaderProps) => {
  const { t } = useLocale();
  const [dragActive, setDragActive] = useState(false);
  const [fileCount, setFileCount] = useState<number>(0);
  const inputRef = useRef<HTMLInputElement>(null);

  const handleFiles = useCallback((files: FileList | null) => {
    if (files && files.length > 0) {
      const fileArray = Array.from(files).filter(file => file.type.startsWith('image/'));
      
      if (fileArray.length > 0) {
        setFileCount(prev => prev + fileArray.length); // Accumulate count
        onImageUploaded(fileArray);
      }
    }
  }, [onImageUploaded]);

  const handleDrag = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    if (isDisabled) return;
    if (e.type === 'dragenter' || e.type === 'dragover') {
      setDragActive(true);
    } else if (e.type === 'dragleave') {
      setDragActive(false);
    }
  }, [isDisabled]);

  const handleDrop = useCallback((e: React.DragEvent<HTMLFormElement>) => {
    e.preventDefault();
    e.stopPropagation();
    if (isDisabled) return;
    setDragActive(false);
    if (e.dataTransfer.files) {
      handleFiles(e.dataTransfer.files);
    }
  }, [handleFiles, isDisabled]);

  const handleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    e.preventDefault();
    if (e.target.files) {
      handleFiles(e.target.files);
    }
    // Reset the input value to allow selecting the same file again
    if (inputRef.current) {
        inputRef.current.value = '';
    }
  }, [handleFiles]);

  const onUploaderClick = () => {
    if (!isDisabled) {
        inputRef.current?.click();
    }
  };
  
  const defaultText = t('uploader.prompt');
  const selectedText = t('uploader.selected', { count: fileCount });

  if (compact) {
    return (
        <div className={`w-full ${isDisabled ? 'opacity-50' : ''}`}>
            <input
                ref={inputRef}
                type="file"
                className="hidden"
                accept="image/*"
                multiple
                onChange={handleChange}
                disabled={isDisabled}
            />
            <button
                onClick={onUploaderClick}
                disabled={isDisabled}
                className="w-full flex items-center justify-center gap-2 px-4 py-3 bg-gray-700/80 text-gray-200 rounded-xl hover:bg-gray-700 disabled:bg-gray-600 disabled:cursor-not-allowed transition-colors"
            >
                <PlusIcon className="w-5 h-5" />
                <span>{t('uploader.addMore')}</span>
            </button>
        </div>
    );
  }

  return (
    <div key={key} className={`w-full h-full ${isDisabled ? 'opacity-50' : ''}`}>
        <form
          className={`relative w-full h-full border border-dashed rounded-xl p-8 text-center transition-colors duration-300 flex flex-col items-center justify-center ${
            dragActive && !isDisabled ? 'border-purple-500 bg-gray-800' : 'border-gray-600'
          } ${!isDisabled ? 'hover:border-gray-500 cursor-pointer' : 'cursor-not-allowed'}`}
          onDragEnter={handleDrag}
          onDragLeave={handleDrag}
          onDragOver={handleDrag}
          onDrop={handleDrop}
          onSubmit={(e) => e.preventDefault()}
          onClick={onUploaderClick}
        >
          <input
            ref={inputRef}
            type="file"
            id="file-upload"
            className="hidden"
            accept="image/*"
            multiple
            onChange={handleChange}
            disabled={isDisabled}
          />
          <div className="flex flex-col items-center justify-center w-full pointer-events-none">
            <UploadIcon className="w-10 h-10 text-gray-500 mb-3" />
            <p className="mt-2 text-gray-400">
              {fileCount > 0 && !isDisabled ? selectedText : defaultText}
            </p>
          </div>
        </form>
    </div>
  );
};

export default memo(ImageUploader);