import React, { useState, useRef, memo, useMemo } from 'react';
import { BookOpenIcon, TrashIcon, GripVerticalIcon, EditIcon } from './Icons';
import { ProcessedPage, useLocale } from './ImageToHtmlConverter';

interface PageManagerProps {
  pages: ProcessedPage[];
  totalInQueue: number;
  onDeletePage: (index: number) => void;
  onReorderPages: (startIndex: number, endIndex: number) => void;
  onResetBook: () => void;
  onEditPage: (index: number) => void;
}

const PageManager = ({ pages, totalInQueue, onDeletePage, onReorderPages, onResetBook, onEditPage }: PageManagerProps) => {
  const { t } = useLocale();
  const dragItem = useRef<number | null>(null);
  const dragOverItem = useRef<number | null>(null);
  const [draggedElement, setDraggedElement] = useState<HTMLLIElement | null>(null);

  const handleDragStart = (e: React.DragEvent<HTMLLIElement>, index: number) => {
    dragItem.current = index;
    setDraggedElement(e.currentTarget);
    // Use a timeout to allow the browser to create the drag image before hiding the element
    setTimeout(() => {
        if (e.currentTarget) e.currentTarget.style.visibility = 'hidden';
    }, 0);
  };

  const handleDragEnter = (_: React.DragEvent<HTMLLIElement>, index: number) => {
    dragOverItem.current = index;
  };

  const handleDragOver = (e: React.DragEvent<HTMLLIElement>) => {
    e.preventDefault(); // Necessary to allow dropping
  };

  const handleDrop = (e: React.DragEvent<HTMLLIElement>) => {
    e.preventDefault();
    if (dragItem.current !== null && dragOverItem.current !== null && dragItem.current !== dragOverItem.current) {
      onReorderPages(dragItem.current, dragOverItem.current);
    }
    cleanupDragState();
  };

  const handleDragEnd = (_: React.DragEvent<HTMLLIElement>) => {
    cleanupDragState();
  };
  
  const cleanupDragState = () => {
      if (draggedElement) {
          draggedElement.style.visibility = 'visible';
      }
      dragItem.current = null;
      dragOverItem.current = null;
      setDraggedElement(null);
  };

  const progressPercentage = totalInQueue > 0 ? (pages.length / totalInQueue) * 100 : 0;

  return (
    <div className="bg-gray-800/50 border border-gray-700/50 rounded-xl p-4 flex flex-col h-full">
      <div className="flex items-center justify-between gap-3 mb-2">
        <div className="flex items-center gap-3">
          <BookOpenIcon className="w-5 h-5 text-gray-400" />
          <h3 className="font-bold text-base text-gray-200">
            {t('pageManager.progressTitle', { processed: pages.length, total: totalInQueue })}
          </h3>
        </div>
        {totalInQueue > 0 && (
          <button onClick={onResetBook} title={t('pageManager.resetTitle')} className="p-1.5 text-red-400 hover:bg-red-500/20 rounded-full transition-colors">
            <TrashIcon className="w-4 h-4" />
          </button>
        )}
      </div>

      {totalInQueue > 0 && (
        <div className="w-full bg-gray-700 rounded-full h-1.5 mb-3">
            <div 
              className="bg-purple-600 h-1.5 rounded-full transition-all duration-500 ease-out" 
              style={{ width: `${progressPercentage}%` }}
            ></div>
        </div>
      )}
      
      <p className="mb-3 text-xs text-gray-500 text-center">
        {pages.length > 0 ? t('pageManager.instructions') : t('pageManager.placeholder')}
      </p>

      <ul className="flex-1 overflow-y-auto space-y-2 -mr-2 pr-2 hide-scrollbar">
        {pages.length > 0 ? pages.map((page, index) => (
          <li
            key={`${index}-${page.pageNumber}`}
            draggable
            onDragStart={(e) => handleDragStart(e, index)}
            onDragEnter={(e) => handleDragEnter(e, index)}
            onDragOver={handleDragOver}
            onDrop={handleDrop}
            onDragEnd={handleDragEnd}
            className={`flex items-center justify-between p-2 rounded-lg bg-gray-700/50 cursor-grab transition-shadow duration-200 ease-in-out hover:shadow-lg hover:shadow-purple-900/50`}
          >
            <div className="flex items-center gap-2 min-w-0">
              <GripVerticalIcon className="w-5 h-5 text-gray-500 flex-shrink-0" />
              <span className="font-medium text-sm text-gray-300 truncate">
                {page.pageNumber ? t('pageManager.pageLabel', { pageNumber: page.pageNumber }) : t('pageManager.pageLabelFallback', { index: index + 1 })}
              </span>
            </div>
            <div className="flex items-center gap-1">
                <button onClick={() => onEditPage(index)} title={t('pageManager.editTitle', { index: index + 1 })} className="p-1.5 text-gray-400 hover:text-purple-400 hover:bg-purple-500/20 rounded-full transition-colors">
                    <EditIcon className="w-4 h-4" />
                </button>
                <button onClick={() => onDeletePage(index)} title={t('pageManager.deleteTitle', { index: index + 1 })} className="p-1.5 text-gray-400 hover:text-red-400 hover:bg-red-500/20 rounded-full transition-colors">
                    <TrashIcon className="w-4 h-4" />
                </button>
            </div>
          </li>
        )) : (
            <div className="h-full flex items-center justify-center text-center text-gray-500 text-sm">
                <p>{totalInQueue > 0 ? 'Waiting for pages to complete...' : t('pageManager.placeholder')}</p>
            </div>
        )}
      </ul>
    </div>
  );
};

export default memo(PageManager);